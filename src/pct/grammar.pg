# $Id$

=begin overview

This is the grammar for mekso written as a sequence of Perl 6 rules.

=end overview

grammar mekso::Grammar is PCT::Grammar;

rule TOP {
	<bridi> ['.i' <bridi>]*
    [ $ || <panic: 'Syntax error'> ]
    {*}
}

token ws {
    <!ww>
    [ \s+ ]*
}

rule bridi {
    | <maiclause>? <sumti>+ <meiclause>? <selbri> <sumti>* {*}    #= non-observative
    | <maiclause>? <meiclause>? <selbri> <sumti>* {*}             #= observative
}

token maiclause {
	<nahusni>mai {*}
}

token meiclause {
	<nahusni>mei {*}
}

token selbri {
    <brivla>
}

token brivla {
    | 'cusku'       #= cusku
	| 'cipra'		#= cipra
	| 'dunxu\'a'	#= dunxuha
}

rule sumti {
    'li' <namcu> {*}    #= li
}

rule namcu {
    | <mekso>        {*} #= mekso
    | <nahusni>      {*} #= nahusni
}

token "nahusni" { <prefixsign>? \s* [<predigits=PA1> \s*]+ ['pi' \s* [<postdigits=PA1> \s*]+]? 'boi'? {*} }

token PA1 { no | pa | re | ci | vo | mu | xa | ze | bi | so }

token prefixsign { 'ma\'u' | 'ni\'u' }

rule mekso {
    | <operator=unaryoperator> <term> {*}           #= unary
    | <term> <operator=binaryoperator> <term> {*}   #= binary
    | <term> <operator=naryoperator> <term> {*}     #= nary
    | <operator=binaryoperator> <term> <term> {*}   #= binary
    | <operator=trinaryoperator> <term> ** 3 {*}    #= trinary
    | <operator=naryoperator> <term> <term>+ {*}    #= nary
}

token unaryoperator { 'fa\'i' | 'cu\'a' | 'ne\'o' | 'va\'a' }

token binaryoperator { 'te\'a' | 'de\'o' | 'fe\'a' }

token trinaryoperator { 'gei' }

token naryoperator { 'su\'i' | 'vu\'u' | 'fe\'i' | 'pi\'i' }

rule value {
    | <nahusni> {*}                              #= nahusni
	| 'vei' <mekso> 've\'o' {*} #= mekso
}

##  terms
token term {
    | <value> {*}                                #= value
}

rule expression is optable { ... }

