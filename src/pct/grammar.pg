# $Id$

=begin overview

This is the grammar for mekso written as a sequence of Perl 6 rules.

=end overview

grammar mekso::Grammar is PCT::Grammar;

rule TOP {
	<bridi> ['.i' <bridi>]*
    [ $ || <panic: 'Syntax error'> ]
    {*}
}

token ws {
    <!ww>
    [ \s+ ]*
}

rule bridi {
    | <maiclause>? <sumti>+ <meiclause>? <selbri> <sumti>* {*}    #= non-observative
    | <maiclause>? <meiclause>? <selbri> <sumti>* {*}             #= observative
}

token maiclause {
	<nahusni>mai {*}
}

token meiclause {
	<nahusni>mei {*}
}

token selbri {
    <brivla>
}

token brivla {
    | 'cusku'      
	| 'cipra'	
	| 'dunxu\'a'
}

token sumti {
    | 'li' <nahusni> <!before <operator>> {*} #= nahusni
    | 'li' <mekso> {*} #= mekso
}

rule namcu {
    | <nahusni>      {*} #= nahusni
    | <mekso>        {*} #= mekso
}

token nahusni { <prefixsign>? \s* [<predigits=nahuvla> \s*]+ ['pi' \s* [<postdigits=nahuvla> \s*]+]? 'boi'? ['ju\'u' <base=nahusni>]? {*} }

token nahuvla { no | pa | re | ci | vo | mu | xa | ze | bi | so | dau | fei | gai | jau | rei | vai }

token prefixsign { 'ma\'u' | 'ni\'u' }

rule mekso {
    | <oper=unaryoperator> <namcu> 'ku\'e'? {*}           #= unary
    | <namcu> <oper=binaryoperator> <namcu> {*}   #= binary
    | <namcu> <oper=naryoperator> <namcu> {*}     #= nary
    | <oper=binaryoperator> <namcu> <namcu> 'ku\'e'? {*}   #= binary
    | <oper=trinaryoperator> <namcu> ** 3 'ku\'e'? {*}    #= trinary
    | <oper=naryoperator> <namcu> <namcu>+ 'ku\'e'? {*}    #= nary
}

token operator {
    | unaryoperator
    | binaryoperator
    | trinaryoperator
    | naryoperator
}

token unaryoperator { 'fa\'i' | 'cu\'a' | 'ne\'o' | 'va\'a' }

token binaryoperator { 'te\'a' | 'de\'o' | 'fe\'a' }

token trinaryoperator { 'gei' }

token naryoperator { 'su\'i' | 'vu\'u' | 'fe\'i' | 'pi\'i' }
